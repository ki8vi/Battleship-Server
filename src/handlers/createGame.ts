import RoomsStore from "../store/rooms";
import CONSTANTS from "../constants";
import { randomUUID } from "crypto";
import SocketStore from "../store/sokets";
import Players from "../store/players";


const roomsStore = RoomsStore.getInstance();
const socketStore = SocketStore.getInstance();
const players = Players.getInstance();

const createGame = (data: string): void => {
    const myIndex = players.getMyIndex();
    if (myIndex !== null) {
        const mePlayer = players.getPlayers()[myIndex];
        const indexRoom = JSON.parse(data).indexRoom;
        if(roomsStore.addPlayerToRoom(indexRoom, { name: mePlayer.name, index: myIndex })) {
            const targetRoom = roomsStore.getRoomById(indexRoom);
            if(targetRoom && targetRoom.roomUsers.length > 1) {
                const idGame = randomUUID();
                const player1 = targetRoom.roomUsers[0].name;
                const player2 = targetRoom.roomUsers[1].name;
                const socketPl1 = socketStore.getSocket(player1);
                const socketPl2 = socketStore.getSocket(player2);
                console.log('target room',player1)
                console.log('target room',player2)
    
                if(roomsStore.deleteRoom(indexRoom)) {
                    const dataOutPl1 = {
                        type: CONSTANTS.CREATE_GAME,
                        data: JSON.stringify({ idGame, idPlayer: randomUUID() }),
                        id: 0,
                    };
                    socketPl1?.send(JSON.stringify(dataOutPl1));
                    const dataOut2 = {
                        type: CONSTANTS.CREATE_GAME,
                        data: JSON.stringify({ idGame, idPlayer: randomUUID() }),
                        id: 0,
                    };
                    socketPl2?.send(JSON.stringify(dataOut2));
                }
            }

        } else { console.log('You can not play with yourself!') }

        }
};

export default createGame;

// {
//     type: "create_game", //send for both players in the room, after they are connected to the room
//     data:
//         {
//             idGame: <number | string>,  
//             idPlayer: <number | string>, /* generated by server id for player in the game session, not enemy (unique id for every player) */
//         },
//     id: 0,
// }